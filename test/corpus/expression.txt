==========================
Strings
=========================

"A string with \"double\" and 'single' quotes";
'A string with "double" and \'single\' quotes';
'\\';
"\\";

'A string with new \
line';

---

(program
  (expression_statement
    (string
      (string_fragment)
      (escape_sequence)
      (string_fragment)
      (escape_sequence)
      (string_fragment)))
  (expression_statement
    (string
      (string_fragment)
      (escape_sequence)
      (string_fragment)
      (escape_sequence)
      (string_fragment)))
  (expression_statement
    (string
      (escape_sequence)))
  (expression_statement
    (string
      (escape_sequence)))
  (expression_statement
    (string
      (string_fragment)
      (escape_sequence)
      (string_fragment))))

==========================
Math operators
==========================

i++;
i--;
i + j * 3 - j % 5;

---

(program
  (expression_statement
    (update_expression
      (identifier)))
  (expression_statement
    (update_expression
      (identifier)))
  (expression_statement
    (binary_expression
      (binary_expression
        (identifier)
        (binary_expression
          (identifier)
          (number)))
      (binary_expression
        (identifier)
        (number)))))

==========================
Boolean operators
==========================

i || j;
i && j;
!a && !b;

---

(program
  (expression_statement
    (binary_expression
      (identifier)
      (identifier)))
  (expression_statement
    (binary_expression
      (identifier)
      (identifier)))
  (expression_statement
    (binary_expression
      (unary_expression
        (identifier))
      (unary_expression
        (identifier)))))

==========================
Bitwise operators
==========================

i >> j;
i << j;
i & j;
i | j;
~i ^ ~j;

---

(program
  (expression_statement
    (binary_expression
      (identifier)
      (identifier)))
  (expression_statement
    (binary_expression
      (identifier)
      (identifier)))
  (expression_statement
    (binary_expression
      (identifier)
      (identifier)))
  (expression_statement
    (binary_expression
      (identifier)
      (identifier)))
  (expression_statement
    (binary_expression
      (unary_expression
        (identifier))
      (unary_expression
        (identifier)))))

==========================
Relational operators
==========================

x < y;
x <= y;
x == y;
x != y;
x >= y;
x > y;

---

(program
      (expression_statement
        (binary_expression
          (identifier)
          (identifier)))
      (expression_statement
        (binary_expression
          (identifier)
          (identifier)))
      (expression_statement
        (binary_expression
          (identifier)
          (identifier)))
      (expression_statement
        (binary_expression
          (identifier)
          (identifier)))
      (expression_statement
        (binary_expression
          (identifier)
          (identifier)))
      (expression_statement
        (binary_expression
          (identifier)
          (identifier))))
          
==========================
Assignments
==========================

x = 0;
x.y = 0;
x["y"] = 0;
(x) = 1;
(x) += 1;
x &= 0;

---

(program
  (expression_statement
    (assignment_expression
      (identifier)
      (number)))
  (expression_statement
    (assignment_expression
      (member_expression
        (identifier)
        (property_identifier))
      (number)))
  (expression_statement
    (assignment_expression
      (subscript_expression
        (identifier)
        (string
          (string_fragment)))
      (number)))
  (expression_statement
    (assignment_expression
      (parenthesized_expression
        (identifier))
      (number)))
  (expression_statement
    (augmented_assignment_expression
      (parenthesized_expression
        (identifier))
      (number)))
  (expression_statement
    (augmented_assignment_expression
      (identifier)
      (number))))

==========================
Assignments
==========================

condition ? case1 : case2;

x.y = some.condition ?
  some.case :
  some.other.case;

---

(program
      (expression_statement
        (ternary_expression
          (identifier)
          (identifier)
          (identifier)))
      (expression_statement
        (assignment_expression
          (member_expression
            (identifier)
            (property_identifier))
          (ternary_expression
            (member_expression
              (identifier)
              (property_identifier))
            (member_expression
              (identifier)
              (property_identifier))
            (member_expression
              (member_expression
                (identifier)
                (property_identifier))
              (property_identifier))))))

==========================
Forward slashes after parenthesized expression
==========================

(foo - bar) / baz;
(this.a() / this.b() - 1) / 2;

---

(program
  (expression_statement
    (binary_expression
      (parenthesized_expression
        (binary_expression
          (identifier)
          (identifier)))
      (identifier)))
  (expression_statement
    (binary_expression
      (parenthesized_expression
        (binary_expression
          (binary_expression
            (call_expression
              (member_expression
                (identifier)
                (property_identifier))
              (arguments))
            (call_expression
              (member_expression
                (identifier)
                (property_identifier))
              (arguments)))
          (number)))
      (number))))